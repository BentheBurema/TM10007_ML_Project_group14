{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BentheBurema/TM10007_ML_Project_group14/blob/main/hyperparameter_tuningipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7SXpaKwwGe5x"
      },
      "source": [
        "# TM10007 Assignment Group 14 Dataset 2\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing libraries"
      ],
      "metadata": {
        "id": "gVOV5PTqgx4n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Basic packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Inspecting dataset\n",
        "from scipy.stats import kstest\n",
        "\n",
        "# Splitting dataset\n",
        "from sklearn import model_selection\n",
        "\n",
        "# Pre-processing\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from sklearn import preprocessing, model_selection, decomposition, svm, feature_selection\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.feature_selection import SelectKBest, f_classif, VarianceThreshold\n",
        "from scipy.stats import skew, kurtosis, norm, kstest\n",
        "from sklearn.feature_selection import RFECV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.decomposition import PCA\n",
        "from scipy.stats import linregress, uniform\n",
        "\n",
        "# Classifiers\n",
        "from sklearn import metrics\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from sklearn.metrics import make_scorer, fbeta_score\n",
        "from sklearn import tree\n",
        "from sklearn.metrics import classification_report, auc, roc_curve\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.model_selection import RandomizedSearchCV, train_test_split, cross_val_score\n",
        "import numpy as np\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import learning_curve\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tabulate import tabulate\n"
      ],
      "metadata": {
        "id": "g9AZir9Zg1gp"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CiDn2Sk-VWqE",
        "outputId": "0bc7089a-8618-4ba2-8806-fa68cade656c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for ktml (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        }
      ],
      "source": [
        "# Run this to use from colab environment\n",
        "!pip install -q --upgrade git+https://github.com/jveenland/tm10007_ml.git"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y2D2ap0-PTHT"
      },
      "source": [
        "## Data loading\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data loading functions.\n",
        "!git clone https://github.com/BentheBurema/TM10007_ML_Project_group14.git # ik snap niet waarom we dit doen? timo\n",
        "from worcliver.load_data import load_data\n",
        "data = load_data()"
      ],
      "metadata": {
        "id": "ixrCL9-7P_eh",
        "outputId": "4c9cf052-e355-4304-c6a1-ee42aa88c514",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'TM10007_ML_Project_group14' already exists and is not an empty directory.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Inspecting data"
      ],
      "metadata": {
        "id": "Y9uvDygkgPbJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Finding the number of missing and incorrect values\n",
        "print(f\"Number of None types: {data.isnull().sum().sum()}\")     # Count number of None types\n",
        "print(f\"Number of NaN values: {data.isna().sum().sum()}\")       # Count number of NaN values\n",
        "print(f'The number of samples: {len(data.index)}')              # print number of samples, features and feature names\n",
        "print(f'The number of features: {len(data.columns)}')\n",
        "\n",
        "# Check if the dataset is balanced\n",
        "malignant = (data['label'] == 'malignant').sum()\n",
        "print(f'The percentage of tumors that is malignant is {(malignant/len(data.index))*100}')\n",
        "\n",
        "# Check if the data is normally distributed\n",
        "Y = data['label']\n",
        "X = data.drop('label', axis=1)\n",
        "\n",
        "p_values = {}\n",
        "for key,values in X.items():\n",
        "\n",
        "  #perform Kolmogorov-Smirnov test on the values and store the p_values\n",
        "  _, p_value = kstest(values, 'norm')\n",
        "  # Store the p-value in the dictionary\n",
        "  p_values[key] = p_value\n",
        "\n",
        "# Print the p-values\n",
        "#for key, p_value in p_values.items():\n",
        "    #print(f\"{key}: {p_value}\")\n",
        "\n",
        "# If p<0.05 is not normally distributed, if p>0.05 it is normally distributed\n",
        "count_less_than_005 = sum(p_value < 0.05 for p_value in p_values.values())\n",
        "count_greater_than_005 = sum(p_value > 0.05 for p_value in p_values.values())\n",
        "\n",
        "print(f\"Amount of featuers not normally distributed: {count_less_than_005}\")\n",
        "print(f\"Amount of features normally distributed: {count_greater_than_005}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o9Nw6L77SqNl",
        "outputId": "c907b694-ae15-4c2d-ae79-fe6c07928998"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of None types: 0\n",
            "Number of NaN values: 0\n",
            "The number of samples: 186\n",
            "The number of features: 494\n",
            "The percentage of tumors that is malignant is 50.53763440860215\n",
            "Amount of featuers not normally distributed: 493\n",
            "Amount of features normally distributed: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Splitting dataset in training set and test set\n"
      ],
      "metadata": {
        "id": "JWd5Fqele1q9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y = data['label']\n",
        "X = data.drop('label', axis=1)\n",
        "\n",
        "# Split the dataset in training and test part\n",
        "X_train, X_test, Y_train, Y_test = model_selection.train_test_split(X,Y,test_size=0.2,random_state=0,stratify=Y)\n",
        "# Check if this is executed correctly\n",
        "print(\"Amount samples in X_train (X_train):\", X_train.shape[0])\n",
        "print(\"Amount samples in X_test  (X_test):\", X_test.shape[0])\n",
        "print(\"Amount samples in Y_train (Y_train):\", Y_train.shape[0])\n",
        "print(\"Amount samples in Y_test (Y_test):\", Y_test.shape[0])\n",
        "\n",
        "display(X_train.head())"
      ],
      "metadata": {
        "id": "4-yByjNBe6z2",
        "outputId": "08f7fb2c-b85b-47e6-8983-9e5af4af3114",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Amount samples in X_train (X_train): 148\n",
            "Amount samples in X_test  (X_test): 38\n",
            "Amount samples in Y_train (Y_train): 148\n",
            "Amount samples in Y_test (Y_test): 38\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             PREDICT_original_sf_compactness_avg_2.5D  \\\n",
              "ID                                                      \n",
              "Liver-149_0                                  0.824583   \n",
              "Liver-132_0                                  0.801146   \n",
              "Liver-018_0                                  0.784347   \n",
              "Liver-135_0                                  0.762971   \n",
              "Liver-015_0                                  0.836579   \n",
              "\n",
              "             PREDICT_original_sf_compactness_std_2.5D  \\\n",
              "ID                                                      \n",
              "Liver-149_0                                  0.055989   \n",
              "Liver-132_0                                  0.092439   \n",
              "Liver-018_0                                  0.051682   \n",
              "Liver-135_0                                  0.071214   \n",
              "Liver-015_0                                  0.075738   \n",
              "\n",
              "             PREDICT_original_sf_rad_dist_avg_2.5D  \\\n",
              "ID                                                   \n",
              "Liver-149_0                              30.099345   \n",
              "Liver-132_0                              62.217271   \n",
              "Liver-018_0                              29.057589   \n",
              "Liver-135_0                              39.719594   \n",
              "Liver-015_0                              61.507831   \n",
              "\n",
              "             PREDICT_original_sf_rad_dist_std_2.5D  \\\n",
              "ID                                                   \n",
              "Liver-149_0                               4.415992   \n",
              "Liver-132_0                               5.375470   \n",
              "Liver-018_0                               5.423131   \n",
              "Liver-135_0                               6.220513   \n",
              "Liver-015_0                               7.303462   \n",
              "\n",
              "             PREDICT_original_sf_roughness_avg_2.5D  \\\n",
              "ID                                                    \n",
              "Liver-149_0                                3.661071   \n",
              "Liver-132_0                                6.822246   \n",
              "Liver-018_0                                8.776120   \n",
              "Liver-135_0                                8.349609   \n",
              "Liver-015_0                               11.104662   \n",
              "\n",
              "             PREDICT_original_sf_roughness_std_2.5D  \\\n",
              "ID                                                    \n",
              "Liver-149_0                                1.861613   \n",
              "Liver-132_0                                2.509137   \n",
              "Liver-018_0                                6.493751   \n",
              "Liver-135_0                                4.035151   \n",
              "Liver-015_0                                3.733124   \n",
              "\n",
              "             PREDICT_original_sf_convexity_avg_2.5D  \\\n",
              "ID                                                    \n",
              "Liver-149_0                                0.963279   \n",
              "Liver-132_0                                0.924549   \n",
              "Liver-018_0                                0.967914   \n",
              "Liver-135_0                                0.944998   \n",
              "Liver-015_0                                0.952526   \n",
              "\n",
              "             PREDICT_original_sf_convexity_std_2.5D  \\\n",
              "ID                                                    \n",
              "Liver-149_0                                0.022393   \n",
              "Liver-132_0                                0.049767   \n",
              "Liver-018_0                                0.015269   \n",
              "Liver-135_0                                0.031507   \n",
              "Liver-015_0                                0.027722   \n",
              "\n",
              "             PREDICT_original_sf_cvar_avg_2.5D  \\\n",
              "ID                                               \n",
              "Liver-149_0                           0.021571   \n",
              "Liver-132_0                           0.007751   \n",
              "Liver-018_0                           0.035515   \n",
              "Liver-135_0                           0.028765   \n",
              "Liver-015_0                           0.016664   \n",
              "\n",
              "             PREDICT_original_sf_cvar_std_2.5D  ...  \\\n",
              "ID                                              ...   \n",
              "Liver-149_0                           0.011780  ...   \n",
              "Liver-132_0                           0.002992  ...   \n",
              "Liver-018_0                           0.011933  ...   \n",
              "Liver-135_0                           0.017286  ...   \n",
              "Liver-015_0                           0.011443  ...   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_median_WL3_N5  \\\n",
              "ID                                                            \n",
              "Liver-149_0                                        0.000000   \n",
              "Liver-132_0                                        0.000000   \n",
              "Liver-018_0                                        0.015554   \n",
              "Liver-135_0                                        0.000000   \n",
              "Liver-015_0                                        0.000000   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_std_WL3_N5  \\\n",
              "ID                                                         \n",
              "Liver-149_0                                     0.104107   \n",
              "Liver-132_0                                     0.100082   \n",
              "Liver-018_0                                     0.152348   \n",
              "Liver-135_0                                     0.108344   \n",
              "Liver-015_0                                     0.078725   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_skewness_WL3_N5  \\\n",
              "ID                                                              \n",
              "Liver-149_0                                          2.756906   \n",
              "Liver-132_0                                          3.289330   \n",
              "Liver-018_0                                          1.301602   \n",
              "Liver-135_0                                          1.929157   \n",
              "Liver-015_0                                          3.747019   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_kurtosis_WL3_N5  \\\n",
              "ID                                                              \n",
              "Liver-149_0                                          8.453818   \n",
              "Liver-132_0                                         11.458823   \n",
              "Liver-018_0                                          0.810392   \n",
              "Liver-135_0                                          3.090863   \n",
              "Liver-015_0                                         15.215261   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_peak_WL3_N5  \\\n",
              "ID                                                          \n",
              "Liver-149_0                                           0.0   \n",
              "Liver-132_0                                           0.0   \n",
              "Liver-018_0                                           0.0   \n",
              "Liver-135_0                                           0.0   \n",
              "Liver-015_0                                           0.0   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_peak_position_WL3_N5  \\\n",
              "ID                                                                   \n",
              "Liver-149_0                                                  0       \n",
              "Liver-132_0                                                  0       \n",
              "Liver-018_0                                                  0       \n",
              "Liver-135_0                                                  0       \n",
              "Liver-015_0                                                  0       \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_range_WL3_N5  \\\n",
              "ID                                                           \n",
              "Liver-149_0                                       0.409805   \n",
              "Liver-132_0                                       0.412003   \n",
              "Liver-018_0                                       0.526233   \n",
              "Liver-135_0                                       0.391573   \n",
              "Liver-015_0                                       0.332604   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_energy_WL3_N5  \\\n",
              "ID                                                            \n",
              "Liver-149_0                                      222.558113   \n",
              "Liver-132_0                                     2198.965478   \n",
              "Liver-018_0                                      678.343564   \n",
              "Liver-135_0                                     1168.726859   \n",
              "Liver-015_0                                     1306.631943   \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_quartile_range_WL3_N5  \\\n",
              "ID                                                                    \n",
              "Liver-149_0                                           0.042636        \n",
              "Liver-132_0                                           0.000000        \n",
              "Liver-018_0                                           0.211135        \n",
              "Liver-135_0                                           0.088960        \n",
              "Liver-015_0                                           0.000000        \n",
              "\n",
              "             PREDICT_original_phasef_phasesym_entropy_WL3_N5  \n",
              "ID                                                            \n",
              "Liver-149_0                                        11.809102  \n",
              "Liver-132_0                                        14.737962  \n",
              "Liver-018_0                                        12.903202  \n",
              "Liver-135_0                                        14.316269  \n",
              "Liver-015_0                                        14.384808  \n",
              "\n",
              "[5 rows x 493 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6608ee34-e79b-4ee6-ae62-e7569647fe2f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PREDICT_original_sf_compactness_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_compactness_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_rad_dist_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_rad_dist_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_roughness_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_roughness_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_convexity_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_convexity_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_cvar_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_cvar_std_2.5D</th>\n",
              "      <th>...</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_median_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_std_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_skewness_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_kurtosis_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_peak_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_peak_position_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_range_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_energy_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_quartile_range_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_entropy_WL3_N5</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Liver-149_0</th>\n",
              "      <td>0.824583</td>\n",
              "      <td>0.055989</td>\n",
              "      <td>30.099345</td>\n",
              "      <td>4.415992</td>\n",
              "      <td>3.661071</td>\n",
              "      <td>1.861613</td>\n",
              "      <td>0.963279</td>\n",
              "      <td>0.022393</td>\n",
              "      <td>0.021571</td>\n",
              "      <td>0.011780</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.104107</td>\n",
              "      <td>2.756906</td>\n",
              "      <td>8.453818</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.409805</td>\n",
              "      <td>222.558113</td>\n",
              "      <td>0.042636</td>\n",
              "      <td>11.809102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liver-132_0</th>\n",
              "      <td>0.801146</td>\n",
              "      <td>0.092439</td>\n",
              "      <td>62.217271</td>\n",
              "      <td>5.375470</td>\n",
              "      <td>6.822246</td>\n",
              "      <td>2.509137</td>\n",
              "      <td>0.924549</td>\n",
              "      <td>0.049767</td>\n",
              "      <td>0.007751</td>\n",
              "      <td>0.002992</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100082</td>\n",
              "      <td>3.289330</td>\n",
              "      <td>11.458823</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.412003</td>\n",
              "      <td>2198.965478</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.737962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liver-018_0</th>\n",
              "      <td>0.784347</td>\n",
              "      <td>0.051682</td>\n",
              "      <td>29.057589</td>\n",
              "      <td>5.423131</td>\n",
              "      <td>8.776120</td>\n",
              "      <td>6.493751</td>\n",
              "      <td>0.967914</td>\n",
              "      <td>0.015269</td>\n",
              "      <td>0.035515</td>\n",
              "      <td>0.011933</td>\n",
              "      <td>...</td>\n",
              "      <td>0.015554</td>\n",
              "      <td>0.152348</td>\n",
              "      <td>1.301602</td>\n",
              "      <td>0.810392</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.526233</td>\n",
              "      <td>678.343564</td>\n",
              "      <td>0.211135</td>\n",
              "      <td>12.903202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liver-135_0</th>\n",
              "      <td>0.762971</td>\n",
              "      <td>0.071214</td>\n",
              "      <td>39.719594</td>\n",
              "      <td>6.220513</td>\n",
              "      <td>8.349609</td>\n",
              "      <td>4.035151</td>\n",
              "      <td>0.944998</td>\n",
              "      <td>0.031507</td>\n",
              "      <td>0.028765</td>\n",
              "      <td>0.017286</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.108344</td>\n",
              "      <td>1.929157</td>\n",
              "      <td>3.090863</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.391573</td>\n",
              "      <td>1168.726859</td>\n",
              "      <td>0.088960</td>\n",
              "      <td>14.316269</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liver-015_0</th>\n",
              "      <td>0.836579</td>\n",
              "      <td>0.075738</td>\n",
              "      <td>61.507831</td>\n",
              "      <td>7.303462</td>\n",
              "      <td>11.104662</td>\n",
              "      <td>3.733124</td>\n",
              "      <td>0.952526</td>\n",
              "      <td>0.027722</td>\n",
              "      <td>0.016664</td>\n",
              "      <td>0.011443</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.078725</td>\n",
              "      <td>3.747019</td>\n",
              "      <td>15.215261</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.332604</td>\n",
              "      <td>1306.631943</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.384808</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 493 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6608ee34-e79b-4ee6-ae62-e7569647fe2f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6608ee34-e79b-4ee6-ae62-e7569647fe2f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6608ee34-e79b-4ee6-ae62-e7569647fe2f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0dd488c2-bea4-4ea1-b551-bcd2be6b4669\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0dd488c2-bea4-4ea1-b551-bcd2be6b4669')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0dd488c2-bea4-4ea1-b551-bcd2be6b4669 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocessing"
      ],
      "metadata": {
        "id": "e8NqRgEddbnT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Outliers"
      ],
      "metadata": {
        "id": "igd4OoB4iPBZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def define_outliers(X_dataset):\n",
        "    outliers_total = 0\n",
        "    for column in X_dataset.columns:\n",
        "        sorted_feature = np.sort(X_dataset[column])  # Sort the values of the column\n",
        "        Q1 = np.percentile(sorted_feature, 25)\n",
        "        Q3 = np.percentile(sorted_feature, 75)\n",
        "        IQR = Q3 - Q1\n",
        "        lower_bound = Q1 - (1.5 * IQR)\n",
        "        upper_bound = Q3 + (1.5 * IQR)\n",
        "        outliers_total_column = ((sorted_feature < lower_bound) | (sorted_feature > upper_bound)).sum()\n",
        "        outliers_total += outliers_total_column\n",
        "    return outliers_total\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "outliers_total = define_outliers(X_train)\n",
        "print(f'In total there are {outliers_total} outliers')\n",
        "\n",
        "\n",
        "\n",
        "## OUDE CODE\n",
        "# # Function to check on outliers using interquartile range\n",
        "# def define_outliers(feature):\n",
        "#   sorted_feature = np.sort(feature)\n",
        "#   Q1 = np.percentile(feature, 25)\n",
        "#   Q3 = np.percentile(feature, 75)\n",
        "#   IQR = Q3 - Q1\n",
        "#   lower_bound = Q1 - (1.5 * IQR)\n",
        "#   upper_bound = Q3 + (1.5 * IQR)\n",
        "#   outliers = feature[(feature < lower_bound) | (feature > upper_bound)]\n",
        "#   outliers_total_column = (feature < lower_bound).sum() + (feature > upper_bound).sum()\n",
        "#   return outliers, outliers_total_column, lower_bound, upper_bound\n",
        "\n",
        "# # Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train gaan toepassen\n",
        "# outliers_total = 0\n",
        "# for column in X_train.columns:\n",
        "#   outliers, outliers_total_column,_,_ = define_outliers(X_train[column])\n",
        "#   outliers_total += outliers_total_column\n",
        "#   #print(f'There are {outliers_total_column} outliers in {column}')\n",
        "#   #print(f'Outliers in column {column}: {outliers.tolist()}')\n",
        "# print(f'In total there are {outliers_total} outliers')\n"
      ],
      "metadata": {
        "id": "VWkLPj38shv-",
        "outputId": "42dfc0e6-f955-41d0-db11-dbcabbcdd047",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "In total there are 3061 outliers\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### RobustScaling\n",
        "\n"
      ],
      "metadata": {
        "id": "q5_f-8Fjh-KB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to scale the datasetusing RobustScaler because there are outliers and the features are not normally distributed\n",
        "def scaling(X_dataset):\n",
        "  scaler = RobustScaler(quantile_range=(0.1, 0.9)).fit(X_dataset) # first and last 10% of samples are seen as outliers\n",
        "  scaler.fit(X_dataset)\n",
        "  X_dataset_scaled = scaler.transform(X_dataset)\n",
        "  X_dataset_scaled = pd.DataFrame(data=X_dataset_scaled, columns=X_dataset.columns)\n",
        "  display(X_dataset_scaled)\n",
        "  return X_dataset_scaled\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "X_train_scaled = scaling(X_train)\n",
        "\n",
        "\n",
        "\n",
        "## oude code\n",
        "# scaler = RobustScaler(quantile_range=(0.1, 0.9)).fit(X_train) # first and last 10% of samples are seen as outliers\n",
        "# scaler.fit(X_train)\n",
        "# X_train_scaled = scaler.transform(X_train)\n",
        "# X_train_scaled = pd.DataFrame(data=X_train_scaled, columns=X_train.columns)\n",
        "# display(X_train_scaled)"
      ],
      "metadata": {
        "id": "80-JybOTs6kK",
        "outputId": "a02fb5a7-c301-466c-b1ed-d7a601a18a39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     PREDICT_original_sf_compactness_avg_2.5D  \\\n",
              "0                                    0.593449   \n",
              "1                                   -0.505103   \n",
              "2                                   -1.292538   \n",
              "3                                   -2.294474   \n",
              "4                                    1.155748   \n",
              "..                                        ...   \n",
              "143                                 -2.429441   \n",
              "144                                  0.083177   \n",
              "145                                  3.848175   \n",
              "146                                 -0.499371   \n",
              "147                                  4.898638   \n",
              "\n",
              "     PREDICT_original_sf_compactness_std_2.5D  \\\n",
              "0                                   -0.512787   \n",
              "1                                    4.819001   \n",
              "2                                   -1.142711   \n",
              "3                                    1.714355   \n",
              "4                                    2.376003   \n",
              "..                                        ...   \n",
              "143                                  6.000959   \n",
              "144                                 -3.677656   \n",
              "145                                 -1.184536   \n",
              "146                                  4.998171   \n",
              "147                                 -3.503332   \n",
              "\n",
              "     PREDICT_original_sf_rad_dist_avg_2.5D  \\\n",
              "0                                 2.764207   \n",
              "1                                49.685762   \n",
              "2                                 1.242290   \n",
              "3                                16.818572   \n",
              "4                                48.649332   \n",
              "..                                     ...   \n",
              "143                              -9.320445   \n",
              "144                              -2.529138   \n",
              "145                             -17.282969   \n",
              "146                              15.306557   \n",
              "147                             -24.906921   \n",
              "\n",
              "     PREDICT_original_sf_rad_dist_std_2.5D  \\\n",
              "0                                18.824778   \n",
              "1                                79.253830   \n",
              "2                                82.255610   \n",
              "3                               132.475634   \n",
              "4                               200.681026   \n",
              "..                                     ...   \n",
              "143                             -70.747301   \n",
              "144                             -12.922478   \n",
              "145                            -163.746650   \n",
              "146                              88.777489   \n",
              "147                            -187.793701   \n",
              "\n",
              "     PREDICT_original_sf_roughness_avg_2.5D  \\\n",
              "0                                -30.273396   \n",
              "1                                 -7.429916   \n",
              "2                                  6.689289   \n",
              "3                                  3.607207   \n",
              "4                                 23.515941   \n",
              "..                                      ...   \n",
              "143                               22.175531   \n",
              "144                              -25.206532   \n",
              "145                              -10.459304   \n",
              "146                                8.815968   \n",
              "147                              -33.411352   \n",
              "\n",
              "     PREDICT_original_sf_roughness_std_2.5D  \\\n",
              "0                                 -6.262893   \n",
              "1                                 -2.296391   \n",
              "2                                 22.111916   \n",
              "3                                  7.051418   \n",
              "4                                  5.201310   \n",
              "..                                      ...   \n",
              "143                               12.260150   \n",
              "144                               -8.069528   \n",
              "145                              -13.579521   \n",
              "146                                5.671185   \n",
              "147                              -13.647931   \n",
              "\n",
              "     PREDICT_original_sf_convexity_avg_2.5D  \\\n",
              "0                                  0.030864   \n",
              "1                                 -0.965440   \n",
              "2                                  0.150117   \n",
              "3                                 -0.439393   \n",
              "4                                 -0.245742   \n",
              "..                                      ...   \n",
              "143                               -0.480027   \n",
              "144                               -0.063973   \n",
              "145                                0.445634   \n",
              "146                               -0.217076   \n",
              "147                                0.934546   \n",
              "\n",
              "     PREDICT_original_sf_convexity_std_2.5D  \\\n",
              "0                                 -2.139842   \n",
              "1                                 54.349288   \n",
              "2                                -16.840124   \n",
              "3                                 16.667383   \n",
              "4                                  8.857921   \n",
              "..                                      ...   \n",
              "143                               16.259302   \n",
              "144                               -9.299049   \n",
              "145                              -14.485538   \n",
              "146                               40.146946   \n",
              "147                              -34.789672   \n",
              "\n",
              "     PREDICT_original_sf_cvar_avg_2.5D  PREDICT_original_sf_cvar_std_2.5D  \\\n",
              "0                            -3.456042                          -0.658069   \n",
              "1                           -26.428354                         -24.889439   \n",
              "2                            19.722419                          -0.235484   \n",
              "3                             8.502050                          14.523536   \n",
              "4                           -11.612280                          -1.586294   \n",
              "..                                 ...                                ...   \n",
              "143                          -0.998742                          -2.573834   \n",
              "144                          -1.650036                          -9.234129   \n",
              "145                         -21.334415                         -12.500779   \n",
              "146                           5.872943                          20.455827   \n",
              "147                         -21.103139                         -26.172872   \n",
              "\n",
              "     ...  PREDICT_original_phasef_phasesym_median_WL3_N5  \\\n",
              "0    ...                                        0.000000   \n",
              "1    ...                                        0.000000   \n",
              "2    ...                                        0.015554   \n",
              "3    ...                                        0.000000   \n",
              "4    ...                                        0.000000   \n",
              "..   ...                                             ...   \n",
              "143  ...                                        0.000000   \n",
              "144  ...                                        0.000000   \n",
              "145  ...                                        0.000000   \n",
              "146  ...                                        0.000000   \n",
              "147  ...                                        0.016282   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_std_WL3_N5  \\\n",
              "0                                      -4.059108   \n",
              "1                                      -5.190570   \n",
              "2                                       9.500316   \n",
              "3                                      -2.868232   \n",
              "4                                     -11.193331   \n",
              "..                                           ...   \n",
              "143                                    10.919090   \n",
              "144                                    -3.182801   \n",
              "145                                     4.947250   \n",
              "146                                   -11.527585   \n",
              "147                                    22.041914   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_skewness_WL3_N5  \\\n",
              "0                                            3.770219   \n",
              "1                                            9.013054   \n",
              "2                                          -10.560298   \n",
              "3                                           -4.380701   \n",
              "4                                           13.519957   \n",
              "..                                                ...   \n",
              "143                                         -8.269818   \n",
              "144                                          0.863018   \n",
              "145                                         -3.314365   \n",
              "146                                         14.010989   \n",
              "147                                        -13.154837   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_kurtosis_WL3_N5  \\\n",
              "0                                           33.530614   \n",
              "1                                           65.130885   \n",
              "2                                          -46.846717   \n",
              "3                                          -22.865560   \n",
              "4                                          104.633136   \n",
              "..                                                ...   \n",
              "143                                        -41.658422   \n",
              "144                                          8.797954   \n",
              "145                                        -16.695182   \n",
              "146                                        108.728430   \n",
              "147                                        -56.017158   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_peak_WL3_N5  \\\n",
              "0                                             0.0   \n",
              "1                                             0.0   \n",
              "2                                             0.0   \n",
              "3                                             0.0   \n",
              "4                                             0.0   \n",
              "..                                            ...   \n",
              "143                                           0.0   \n",
              "144                                           0.0   \n",
              "145                                           0.0   \n",
              "146                                           0.0   \n",
              "147                                           0.0   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_peak_position_WL3_N5  \\\n",
              "0                                                  0.0       \n",
              "1                                                  0.0       \n",
              "2                                                  0.0       \n",
              "3                                                  0.0       \n",
              "4                                                  0.0       \n",
              "..                                                 ...       \n",
              "143                                                0.0       \n",
              "144                                                0.0       \n",
              "145                                                0.0       \n",
              "146                                                0.0       \n",
              "147                                                0.0       \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_range_WL3_N5  \\\n",
              "0                                        -1.448086   \n",
              "1                                        -1.373211   \n",
              "2                                         2.517749   \n",
              "3                                        -2.069117   \n",
              "4                                        -4.077755   \n",
              "..                                             ...   \n",
              "143                                       2.893651   \n",
              "144                                      -1.494748   \n",
              "145                                       1.676575   \n",
              "146                                      -4.352899   \n",
              "147                                       6.639991   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_energy_WL3_N5  \\\n",
              "0                                        -56.600453   \n",
              "1                                        753.453879   \n",
              "2                                        130.208697   \n",
              "3                                        331.198189   \n",
              "4                                        387.720246   \n",
              "..                                              ...   \n",
              "143                                        6.156466   \n",
              "144                                      -79.913172   \n",
              "145                                      -69.180839   \n",
              "146                                      -70.029644   \n",
              "147                                      -85.607378   \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_quartile_range_WL3_N5  \\\n",
              "0                                            -0.012193        \n",
              "1                                            -0.054829        \n",
              "2                                             0.156306        \n",
              "3                                             0.034131        \n",
              "4                                            -0.054829        \n",
              "..                                                 ...        \n",
              "143                                           0.123238        \n",
              "144                                          -0.019185        \n",
              "145                                           0.047388        \n",
              "146                                          -0.054829        \n",
              "147                                           0.243530        \n",
              "\n",
              "     PREDICT_original_phasef_phasesym_entropy_WL3_N5  \n",
              "0                                          -0.934114  \n",
              "1                                           5.029282  \n",
              "2                                           1.293562  \n",
              "3                                           4.170682  \n",
              "4                                           4.310234  \n",
              "..                                               ...  \n",
              "143                                        -1.058700  \n",
              "144                                        -2.029277  \n",
              "145                                        -2.501283  \n",
              "146                                        -1.362260  \n",
              "147                                        -4.615687  \n",
              "\n",
              "[148 rows x 493 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d165691-04e2-4341-a06e-09fbfbecab74\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PREDICT_original_sf_compactness_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_compactness_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_rad_dist_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_rad_dist_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_roughness_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_roughness_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_convexity_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_convexity_std_2.5D</th>\n",
              "      <th>PREDICT_original_sf_cvar_avg_2.5D</th>\n",
              "      <th>PREDICT_original_sf_cvar_std_2.5D</th>\n",
              "      <th>...</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_median_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_std_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_skewness_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_kurtosis_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_peak_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_peak_position_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_range_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_energy_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_quartile_range_WL3_N5</th>\n",
              "      <th>PREDICT_original_phasef_phasesym_entropy_WL3_N5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.593449</td>\n",
              "      <td>-0.512787</td>\n",
              "      <td>2.764207</td>\n",
              "      <td>18.824778</td>\n",
              "      <td>-30.273396</td>\n",
              "      <td>-6.262893</td>\n",
              "      <td>0.030864</td>\n",
              "      <td>-2.139842</td>\n",
              "      <td>-3.456042</td>\n",
              "      <td>-0.658069</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-4.059108</td>\n",
              "      <td>3.770219</td>\n",
              "      <td>33.530614</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.448086</td>\n",
              "      <td>-56.600453</td>\n",
              "      <td>-0.012193</td>\n",
              "      <td>-0.934114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.505103</td>\n",
              "      <td>4.819001</td>\n",
              "      <td>49.685762</td>\n",
              "      <td>79.253830</td>\n",
              "      <td>-7.429916</td>\n",
              "      <td>-2.296391</td>\n",
              "      <td>-0.965440</td>\n",
              "      <td>54.349288</td>\n",
              "      <td>-26.428354</td>\n",
              "      <td>-24.889439</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-5.190570</td>\n",
              "      <td>9.013054</td>\n",
              "      <td>65.130885</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.373211</td>\n",
              "      <td>753.453879</td>\n",
              "      <td>-0.054829</td>\n",
              "      <td>5.029282</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.292538</td>\n",
              "      <td>-1.142711</td>\n",
              "      <td>1.242290</td>\n",
              "      <td>82.255610</td>\n",
              "      <td>6.689289</td>\n",
              "      <td>22.111916</td>\n",
              "      <td>0.150117</td>\n",
              "      <td>-16.840124</td>\n",
              "      <td>19.722419</td>\n",
              "      <td>-0.235484</td>\n",
              "      <td>...</td>\n",
              "      <td>0.015554</td>\n",
              "      <td>9.500316</td>\n",
              "      <td>-10.560298</td>\n",
              "      <td>-46.846717</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.517749</td>\n",
              "      <td>130.208697</td>\n",
              "      <td>0.156306</td>\n",
              "      <td>1.293562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-2.294474</td>\n",
              "      <td>1.714355</td>\n",
              "      <td>16.818572</td>\n",
              "      <td>132.475634</td>\n",
              "      <td>3.607207</td>\n",
              "      <td>7.051418</td>\n",
              "      <td>-0.439393</td>\n",
              "      <td>16.667383</td>\n",
              "      <td>8.502050</td>\n",
              "      <td>14.523536</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-2.868232</td>\n",
              "      <td>-4.380701</td>\n",
              "      <td>-22.865560</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.069117</td>\n",
              "      <td>331.198189</td>\n",
              "      <td>0.034131</td>\n",
              "      <td>4.170682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.155748</td>\n",
              "      <td>2.376003</td>\n",
              "      <td>48.649332</td>\n",
              "      <td>200.681026</td>\n",
              "      <td>23.515941</td>\n",
              "      <td>5.201310</td>\n",
              "      <td>-0.245742</td>\n",
              "      <td>8.857921</td>\n",
              "      <td>-11.612280</td>\n",
              "      <td>-1.586294</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-11.193331</td>\n",
              "      <td>13.519957</td>\n",
              "      <td>104.633136</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.077755</td>\n",
              "      <td>387.720246</td>\n",
              "      <td>-0.054829</td>\n",
              "      <td>4.310234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>-2.429441</td>\n",
              "      <td>6.000959</td>\n",
              "      <td>-9.320445</td>\n",
              "      <td>-70.747301</td>\n",
              "      <td>22.175531</td>\n",
              "      <td>12.260150</td>\n",
              "      <td>-0.480027</td>\n",
              "      <td>16.259302</td>\n",
              "      <td>-0.998742</td>\n",
              "      <td>-2.573834</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>10.919090</td>\n",
              "      <td>-8.269818</td>\n",
              "      <td>-41.658422</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.893651</td>\n",
              "      <td>6.156466</td>\n",
              "      <td>0.123238</td>\n",
              "      <td>-1.058700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>0.083177</td>\n",
              "      <td>-3.677656</td>\n",
              "      <td>-2.529138</td>\n",
              "      <td>-12.922478</td>\n",
              "      <td>-25.206532</td>\n",
              "      <td>-8.069528</td>\n",
              "      <td>-0.063973</td>\n",
              "      <td>-9.299049</td>\n",
              "      <td>-1.650036</td>\n",
              "      <td>-9.234129</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-3.182801</td>\n",
              "      <td>0.863018</td>\n",
              "      <td>8.797954</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.494748</td>\n",
              "      <td>-79.913172</td>\n",
              "      <td>-0.019185</td>\n",
              "      <td>-2.029277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>3.848175</td>\n",
              "      <td>-1.184536</td>\n",
              "      <td>-17.282969</td>\n",
              "      <td>-163.746650</td>\n",
              "      <td>-10.459304</td>\n",
              "      <td>-13.579521</td>\n",
              "      <td>0.445634</td>\n",
              "      <td>-14.485538</td>\n",
              "      <td>-21.334415</td>\n",
              "      <td>-12.500779</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.947250</td>\n",
              "      <td>-3.314365</td>\n",
              "      <td>-16.695182</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.676575</td>\n",
              "      <td>-69.180839</td>\n",
              "      <td>0.047388</td>\n",
              "      <td>-2.501283</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>-0.499371</td>\n",
              "      <td>4.998171</td>\n",
              "      <td>15.306557</td>\n",
              "      <td>88.777489</td>\n",
              "      <td>8.815968</td>\n",
              "      <td>5.671185</td>\n",
              "      <td>-0.217076</td>\n",
              "      <td>40.146946</td>\n",
              "      <td>5.872943</td>\n",
              "      <td>20.455827</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-11.527585</td>\n",
              "      <td>14.010989</td>\n",
              "      <td>108.728430</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.352899</td>\n",
              "      <td>-70.029644</td>\n",
              "      <td>-0.054829</td>\n",
              "      <td>-1.362260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>4.898638</td>\n",
              "      <td>-3.503332</td>\n",
              "      <td>-24.906921</td>\n",
              "      <td>-187.793701</td>\n",
              "      <td>-33.411352</td>\n",
              "      <td>-13.647931</td>\n",
              "      <td>0.934546</td>\n",
              "      <td>-34.789672</td>\n",
              "      <td>-21.103139</td>\n",
              "      <td>-26.172872</td>\n",
              "      <td>...</td>\n",
              "      <td>0.016282</td>\n",
              "      <td>22.041914</td>\n",
              "      <td>-13.154837</td>\n",
              "      <td>-56.017158</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.639991</td>\n",
              "      <td>-85.607378</td>\n",
              "      <td>0.243530</td>\n",
              "      <td>-4.615687</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>148 rows × 493 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d165691-04e2-4341-a06e-09fbfbecab74')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7d165691-04e2-4341-a06e-09fbfbecab74 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7d165691-04e2-4341-a06e-09fbfbecab74');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-910346d8-1e5c-4aa1-88cb-df59392e5022\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-910346d8-1e5c-4aa1-88cb-df59392e5022')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-910346d8-1e5c-4aa1-88cb-df59392e5022 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Remove zero variance"
      ],
      "metadata": {
        "id": "ne1Vx0nM86ma"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def zero_variance(X_dataset_scaled):\n",
        "  # Remove features with zero variance\n",
        "  vt = VarianceThreshold(threshold=0)\n",
        "  X_dataset_var = vt.fit_transform(X_dataset_scaled)\n",
        "  # Selecteer de juiste kolommen uit X_train_scaled\n",
        "  selected_columns = X_dataset_scaled.columns[vt.get_support()]\n",
        "\n",
        "  # Maak een DataFrame van de getransformeerde dataset met de geselecteerde kolomnamen\n",
        "  X_dataset_var = pd.DataFrame(X_dataset_var, columns=selected_columns)\n",
        "  print(f'The data shape before removing zero variance: {X_dataset_scaled.shape} and after: {X_dataset_var.shape}')\n",
        "  return X_dataset_var\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "X_train_var = zero_variance(X_train_scaled)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## oude code\n",
        "# # Remove features with zero variance\n",
        "# vt = VarianceThreshold(threshold=0)\n",
        "# X_train_var = vt.fit_transform(X_train_scaled)\n",
        "# # Selecteer de juiste kolommen uit X_train_scaled\n",
        "# selected_columns = X_train_scaled.columns[vt.get_support()]\n",
        "\n",
        "# # Maak een DataFrame van de getransformeerde dataset met de geselecteerde kolomnamen\n",
        "# X_train_var = pd.DataFrame(X_train_var, columns=selected_columns)\n",
        "# print(f'The data shape before removing zero variance: {X_train_scaled.shape} and after: {X_train_var.shape}')"
      ],
      "metadata": {
        "id": "5O136Dth863U",
        "outputId": "a33acb4f-d495-43bd-8876-b5531d71d2dc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The data shape before removing zero variance: (148, 493) and after: (148, 476)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ANOVA test"
      ],
      "metadata": {
        "id": "trXf6IyGIR3v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to perform ANOVA test. ANOVA feature selection for numeric input and categorical output\n",
        "def anova_analysis(X_dataset_var, Y_dataset):\n",
        "  # define feature selection\n",
        "  fs = SelectKBest(score_func=f_classif, k='all')\n",
        "\n",
        "  # apply feature selection\n",
        "  X_dataset_anova = fs.fit_transform(X_dataset_var, Y_dataset)\n",
        "  X_dataset_anova = pd.DataFrame(data=X_dataset_anova, columns=X_dataset_var.columns)\n",
        "  feature_scores = list(zip(fs.pvalues_, X_dataset_anova.columns))\n",
        "\n",
        "  # Features selecteren met p-waarde kleiner dan 0.05, want dan is benigne significant verschillend van maligne\n",
        "  selected_features = [feature[1] for feature in feature_scores if feature[0] < 0.05]\n",
        "\n",
        "  # Filter de DataFrame om alleen geselecteerde features te behouden\n",
        "  X_dataset_anova = X_dataset_anova[selected_features]\n",
        "  print(f'The data shape before ANOVA: {X_dataset_var.shape} and after ANOVA: {X_dataset_anova.shape}')\n",
        "  return X_dataset_anova\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "X_train_anova = anova_analysis(X_train_var, Y_train)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Oude code\n",
        "# # define feature selection\n",
        "# fs = SelectKBest(score_func=f_classif, k='all')\n",
        "\n",
        "# ## apply feature selection\n",
        "# X_train_anova = fs.fit_transform(X_train_var, Y_train)\n",
        "# X_train_anova = pd.DataFrame(data=X_train_anova, columns=X_train_var.columns)\n",
        "# feature_scores = list(zip(fs.pvalues_, X_train_anova.columns))\n",
        "\n",
        "# # Features selecteren met p-waarde kleiner dan 0.05, want dan is benigne significant verschillend van maligne\n",
        "# selected_features = [feature[1] for feature in feature_scores if feature[0] < 0.05]\n",
        "\n",
        "# # Filter de DataFrame om alleen geselecteerde features te behouden\n",
        "# X_train_anova = X_train_anova[selected_features]\n",
        "# print(f'The data shape before ANOVA: {X_train_var.shape} and after ANOVA: {X_train_anova.shape}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UQgpkaWzIEVu",
        "outputId": "766c7a85-171c-48aa-e40f-a697c5205ce7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The data shape before ANOVA: (148, 476) and after ANOVA: (148, 61)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### PCA\n"
      ],
      "metadata": {
        "id": "zr0RGXg20kkg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_optimal_components_flattening(X_dataset_anova, window_size, slope_threshold):\n",
        "    pca = PCA()\n",
        "    pca.fit(X_dataset_anova)\n",
        "    cumulative_variance_ratio = np.cumsum(pca.explained_variance_ratio_)\n",
        "\n",
        "    # Pas stuksgewijze lineaire regressie toe op de cumulatieve verklaarde variantiecurve\n",
        "    slopes = []\n",
        "    for i in range(window_size // 2, len(cumulative_variance_ratio) - window_size // 2):\n",
        "        x = np.arange(i - window_size // 2, i + window_size // 2 + 1)\n",
        "        y = cumulative_variance_ratio[i - window_size // 2:i + window_size // 2 + 1]\n",
        "        slope, _, _, _, _ = linregress(x, y)\n",
        "        slopes.append(slope)\n",
        "\n",
        "    # Vind het punt waar de helling van de regressielijn significant verandert\n",
        "    for i, slope in enumerate(slopes):\n",
        "        if slope < slope_threshold:\n",
        "            change_point_index = i + window_size // 2\n",
        "            break\n",
        "\n",
        "    flattening_point_x = change_point_index + 1\n",
        "    flattening_point_y = cumulative_variance_ratio[change_point_index]\n",
        "\n",
        "    # Plot de cumulatieve verklaarde variantie en de regressielijn\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(range(1, len(cumulative_variance_ratio) + 1), cumulative_variance_ratio, marker='o', linestyle='-')\n",
        "    plt.title('Afvlakkingspunt bepalen')\n",
        "    plt.xlabel('Aantal componenten')\n",
        "    plt.ylabel('Cumulatieve verklaarde variantie')\n",
        "    plt.grid(True)\n",
        "    plt.scatter(flattening_point_x, flattening_point_y, color='red', label='Flattening point', zorder=5)  # Verhoog de z-index\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    return flattening_point_x\n",
        "\n",
        "def PCA_analysis(X_dataset_anova,best_n_compontents):\n",
        "  # Initialiseer PCA met het beste aantal componenten\n",
        "  pca = PCA(n_components=best_n_components)\n",
        "  # Pas PCA toe op je trainingsgegevens\n",
        "  X_dataset_pca = pca.fit_transform(X_dataset_anova)\n",
        "  print(f'The data shape before PCA: {X_dataset_anova.shape} and after: {X_dataset_pca.shape}')\n",
        "  return X_dataset_pca\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "best_n_components = find_optimal_components_flattening(X_train_anova, window_size=20, slope_threshold=0.01)  # Vergroot het venster naar 10 punten\n",
        "print(\"Beste aantal componenten (Afvlakkingspunt-methode):\", best_n_components)\n",
        "X_train_pca = PCA_analysis(X_train_anova, best_n_components)\n",
        "\n",
        "\n",
        "## OUDE CODE (de functie van find_optimal_components_flattening was al zo goed als goed)\n",
        "# # Initialiseer PCA met het beste aantal componenten\n",
        "# pca = PCA(n_components=best_n_components)\n",
        "\n",
        "# # Pas PCA toe op je trainingsgegevens\n",
        "# X_train_pca = pca.fit_transform(X_train_anova)\n",
        "\n",
        "\n",
        "# print(f'The data shape before PCA: {X_train_anova.shape} and after: {X_train_pca.shape}')"
      ],
      "metadata": {
        "id": "o-8rslb881cf",
        "outputId": "0130b9c7-38f7-48a6-94b5-6ff618468359",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Beste aantal componenten (Afvlakkingspunt-methode): 11\n",
            "The data shape before PCA: (148, 61) and after: (148, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Classifiers"
      ],
      "metadata": {
        "id": "3neEix3elSIk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create functions which are used in the classifiers"
      ],
      "metadata": {
        "id": "vCkPnGW33Du0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to initialize label encoder\n",
        "def label_encoder(Y_dataset):\n",
        "  label_encoder = LabelEncoder()\n",
        "\n",
        "  # Apply label encoder on Y_train to transform categorical input to numeric input. Malignant = 1, benigne = 0\n",
        "  Y_dataset_encoded = label_encoder.fit_transform(Y_dataset)\n",
        "\n",
        "  # Define the coded classes\n",
        "  print(\"Coded classes:\", label_encoder.classes_)\n",
        "  return Y_dataset_encoded\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "Y_train_encoded = label_encoder(Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1p5XIpfY2d3R",
        "outputId": "a3bb4c60-2a95-420f-f0bc-6c6f380a58f5"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coded classes: ['benign' 'malignant']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating way of scoring\n",
        "f2_scorer = make_scorer(fbeta_score, beta=2)\n",
        "cv = StratifiedKFold(n_splits=5)"
      ],
      "metadata": {
        "id": "q42E_KLx3Iz-"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### K-NN"
      ],
      "metadata": {
        "id": "dDsXo_G7R0Jz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def KNN(X_dataset_pca, Y_dataset_encoded):\n",
        "  # Define a parameter grid for RandomizedSearchCV\n",
        "  parameter_grid = {'n_neighbors': list(range(5, 20)),\n",
        "                    'weights': ['uniform','distance'],\n",
        "                    'p': list(range(1, 10)),\n",
        "                    'algorithm': ['ball_tree','kd_tree','brute','auto']\n",
        "                    }\n",
        "\n",
        "  # Create a RandomizedSearchCV and apply it to the dataset with crossvalidation\n",
        "  rscv_knn = RandomizedSearchCV(KNeighborsClassifier(), param_distributions=parameter_grid, n_iter=40, cv=cv, random_state=0, scoring=f2_scorer)\n",
        "\n",
        "  # Fit the classifier\n",
        "  rscv_knn.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "\n",
        "  # Extract the best parameters and show the F2-score\n",
        "  print('Best parameters found:', rscv_knn.best_params_)\n",
        "  print('Best F2-score found:', rscv_knn.best_score_)\n",
        "\n",
        "  # Fit the classifier with the best parameters on the dataset\n",
        "  knn_classifier = rscv_knn.best_estimator_\n",
        "  knn_classifier.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "  return rscv_knn, knn_classifier\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "RSCV_KNN, KNN_classifier = KNN(X_train_pca, Y_train_encoded)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## OUDE CODE + extra deel over waar ik (Benthe) de kriebels van krijg ;)\n",
        "# # Maak een parameter grid voor RandomizedSearchCV\n",
        "# param_dist = {'n_neighbors': list(range(5, 20)),\n",
        "#               'weights': ['uniform','distance'],\n",
        "#               'p': list(range(1, 10)),\n",
        "#               'algorithm': ['ball_tree','kd_tree','brute','auto']}\n",
        "\n",
        "# # Maak een RandomizedSearchCV-object en pas het toe op je trainingsdata met kruisvalidatie\n",
        "# RSCV_KNN = RandomizedSearchCV(KNeighborsClassifier(), param_distributions=param_dist, n_iter=10, cv=5, random_state=0, scoring=f2_scorer)  # 5-voudige kruisvalidatie\n",
        "# RSCV_KNN.fit(X_train_pca, Y_train_encoded)\n",
        "\n",
        "# # Bekijk de beste parameters en beste score\n",
        "# print(\"Beste parameters gevonden: \", RSCV_KNN.best_params_)\n",
        "# print(\"Beste cross-validation score: {:.2f}\".format(RSCV_KNN.best_score_))\n",
        "\n",
        "# Niet doen dit dan krijgt Benthe de kriebels!!!\n",
        "# # Bekijk prestaties van het beste model met kruisvalidatie op de hele dataset\n",
        "# best_knn = random_search.best_estimator_\n",
        "# cv_scores = cross_val_score(best_knn, X_test, Y_test, cv=5)  # 5-voudige kruisvalidatie\n",
        "# print(\"Gemiddelde cross-validation score op de hele dataset: {:.2f}\".format(np.mean(cv_scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EVTJAc2R2l_O",
        "outputId": "3df429e1-fc6b-4b6e-cd79-b5625ecdf973"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters found: {'weights': 'uniform', 'p': 6, 'n_neighbors': 9, 'algorithm': 'kd_tree'}\n",
            "Best F2-score found: 0.5917846191818795\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Decision Tree Classifier"
      ],
      "metadata": {
        "id": "6Fgle8xnL766"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def DTC(X_dataset_pca, Y_dataset_encoded):\n",
        "  # Define a parameter grid for RandomizedSearchCV\n",
        "  parameter_grid = {\"max_depth\": np.arange(5,25,5),\n",
        "                    \"min_samples_split\": np.arange(2,10,1),\n",
        "                    'min_samples_leaf': np.arange(2,10,2),\n",
        "                    'max_leaf_nodes': np.arange(2,20,2),\n",
        "                    \"criterion\": ['gini', 'entropy', 'log_loss'],\n",
        "                    \"splitter\": ['best', 'random'],\n",
        "                    }\n",
        "\n",
        "  # Create a RandomizedSearchCV and apply it to the dataset with crossvalidation\n",
        "  rscv_dtc = RandomizedSearchCV(tree.DecisionTreeClassifier(), param_distributions=parameter_grid, refit=True, verbose=1, scoring=f2_scorer, cv=cv, random_state=0, n_iter=40)\n",
        "\n",
        "  # Fit the classifier\n",
        "  rscv_dtc.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "\n",
        "  # Extract the best parameters and show the F2-score\n",
        "  print('Best parameters found:', rscv_dtc.best_params_)\n",
        "  print('Best F2-score found:', rscv_dtc.best_score_)\n",
        "\n",
        "  # Fit the classifier with the best parameters on the dataset\n",
        "  dtc_classifier = rscv_dtc.best_estimator_\n",
        "  dtc_classifier.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "  return rscv_dtc, dtc_classifier\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "RSCV_DTC, DTC_classifier = DTC(X_train_pca, Y_train_encoded)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## OUDE CODE\n",
        "# # Define hyperparameter grid\n",
        "# parameters_DTC = {\n",
        "#     \"criterion\": ['gini', 'entropy', 'log_loss'],\n",
        "#     \"splitter\": ['best', 'random'],\n",
        "#     \"max_depth\": tuple(range(5,50,5)),\n",
        "#     \"min_samples_split\": [2,3,4]\n",
        "# }\n",
        "\n",
        "# # Define parameters for RandomizedSearchCV\n",
        "# f2_scorer = make_scorer(fbeta_score, beta=2)\n",
        "# DTC = tree.DecisionTreeClassifier()\n",
        "\n",
        "# # pred_DTC = DTC.predict(X_train_pca)\n",
        "# # print(classification_report(Y_train_encoded, pred_DTC))\n",
        "\n",
        "# # Perform the RandomizedSearchCV for decision tree classifier\n",
        "# RSCV_DTC = RandomizedSearchCV(\n",
        "#     estimator=DTC, param_distributions=parameters_DTC, refit=True, verbose=1, scoring=f2_scorer, cv=StratifiedKFold(5), random_state=0, n_iter=15\n",
        "#     )\n",
        "\n",
        "# # Fit the classifier\n",
        "# RSCV_DTC.fit(X_train_pca,Y_train_encoded)\n",
        "\n",
        "# # Extract the best parameters and show the F2-score\n",
        "# print('Best parameters found:', RSCV_DTC.best_params_)\n",
        "# print('Best F2-score found:', RSCV_DTC.best_score_)\n",
        "\n",
        "# # Fit the classifier with the best parameters on the dataset\n",
        "# DTC_classifier = RSCV_DTC.best_estimator_\n",
        "# DTC_classifier.fit(X_train_pca, Y_train_encoded)"
      ],
      "metadata": {
        "id": "-hPksamiL94z",
        "outputId": "4d171651-5760-4061-8541-84275fb9aab8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n",
            "Best parameters found: {'splitter': 'best', 'min_samples_split': 8, 'min_samples_leaf': 6, 'max_leaf_nodes': 14, 'max_depth': 5, 'criterion': 'entropy'}\n",
            "Best F2-score found: 0.6779302191582215\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## RandomForest Classifier"
      ],
      "metadata": {
        "id": "YaU8-K616yYB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def RFC(X_dataset_pca, Y_dataset_encoded):\n",
        "  # Define a parameter grid for RandomizedSearchCV\n",
        "  parameter_grid = {'n_estimators': np.arange(50,300,20),\n",
        "                    'max_depth': np.arange(5,25,5),\n",
        "                    'min_samples_split': np.arange(2,10,1),\n",
        "                    'min_samples_leaf': np.arange(1,10,1)\n",
        "                    }\n",
        "\n",
        "\n",
        "      # 'n_estimators': np.arange(50, 300, 50),\n",
        "      #               'criterion': ['gini','entropy'],\n",
        "      #               'max_depth': np.arange(5,25,5),\n",
        "      #               'max_leaf_nodes': np.arange(2,20,2),\n",
        "      #               'min_samples_split': np.arange(2,10,1),\n",
        "      #               'min_samples_leaf': np.arange(1,10,1),\n",
        "      #               'bootstrap': [True,False]\n",
        "      #               }\n",
        "\n",
        "  # Create a RandomizedSearchCV and apply it to the dataset with crossvalidation\n",
        "  rscv_rf = RandomizedSearchCV(RandomForestClassifier(), param_distributions=parameter_grid, cv=cv, n_iter=40, scoring=f2_scorer, random_state=0)\n",
        "\n",
        "  # Fit the classifier\n",
        "  rscv_rf.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "\n",
        "  # Extract the best parameters and show the F2-score\n",
        "  print('Best parameters found:', rscv_rf.best_params_)\n",
        "  print('Best F2-score found:', rscv_rf.best_score_)\n",
        "\n",
        "  # Fit the classifier with the best parameters on the dataset\n",
        "  rf_classifier = rscv_rf.best_estimator_\n",
        "  rf_classifier.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "  return rscv_rf, rf_classifier\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "RSCV_RF, RF_classifier = RFC(X_train_pca, Y_train_encoded)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## OUDE CODE\n",
        "# # Define hyperparameter grid\n",
        "# parameter_grid = {\n",
        "#     'n_estimators': np.arange(50, 500, 50),\n",
        "#     'max_features': ['sqrt','log2',None],\n",
        "#     'max_depth': np.arange(5,50,5),\n",
        "#     'min_samples_split': [2, 4],\n",
        "#     'min_samples_leaf': [1, 2, 4],\n",
        "#     'bootstrap': [True,False]\n",
        "# }\n",
        "\n",
        "# # Define parameters for RandomizedSearchCV\n",
        "# f2_scorer = make_scorer(fbeta_score, beta=2)\n",
        "# rf = RandomForestClassifier()\n",
        "# cv = StratifiedKFold(n_splits=5)\n",
        "\n",
        "# # Perform the RandomizedSearchCV\n",
        "# RSCV_RF = RandomizedSearchCV(estimator=rf, param_distributions=parameter_grid, cv=cv, n_iter=40, scoring=f2_scorer, random_state=0)\n",
        "\n",
        "# # Fit the classifier\n",
        "# RSCV_RF.fit(X_train_pca, Y_train_encoded)\n",
        "\n",
        "# # Extract the best parameters and show the F2-score\n",
        "# print('Best parameters found:', RSCV_RF.best_params_)\n",
        "# print('Best F2-score found:', RSCV_RF.best_score_)\n",
        "\n",
        "# # Fit the classifier with the best parameters on the dataset\n",
        "# rf_classifier = RSCV_RF.best_estimator_\n",
        "# rf_classifier.fit(X_train_pca, Y_train_encoded)"
      ],
      "metadata": {
        "id": "C96xN8KEDWpd",
        "outputId": "b6101dfe-582c-4f68-afc9-616345861463",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters found: {'n_estimators': 270, 'max_depth': 5}\n",
            "Best F2-score found: 0.6707859078590784\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SVM"
      ],
      "metadata": {
        "id": "Upkn6-kGR38U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def SVM(X_dataset_pca, Y_dataset_encoded):\n",
        "  # Define a parameter grid for RandomizedSearchCV\n",
        "  parameter_grid = {'C': uniform(0.1, 10), # uniform distribution\n",
        "                    'kernel': ['linear','rbf','poly'],\n",
        "                    'gamma': ['scale','auto'] + list(np.logspace(-3,3,50))\n",
        "                    }\n",
        "  # Create a RandomizedSearchCV and apply it to the dataset with crossvalidation\n",
        "  rscv_svm = RandomizedSearchCV(SVC(), param_distributions=paramater_grid, n_iter=20, cv=cv, scoring=f2_scorer)\n",
        "\n",
        "  # Fit the classifier\n",
        "  rscv_svm.fit(X_dataset_pca, Y_dataset_encoded)\n",
        "\n",
        "  # Extract the best parameters and show the F2-score\n",
        "  print('Best parameters found:', rscv_svm.best_params_)\n",
        "  print('Best F2-score found:', rscv_svm.best_score_)\n",
        "\n",
        "  # Fit the classifier with the best parameters on the dataset\n",
        "  svm_classifier = rscv_svm.best_estimator_\n",
        "  svm_classifier.fit(X_train_pca, Y_train_encoded)\n",
        "  return rscv_svm, svm_classifier\n",
        "\n",
        "# Performing the above functions on the train set --> dit kan dus naar het einde van de code als we alle functies op train/test gaan toepassen\n",
        "RSCV_SVM, SVM_classifier = SVM(X_train_pca, Y_train_encoded)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## OUDE CODE\n",
        "# # Define large hyperparameter space\n",
        "# param_dist = {\n",
        "#     'C': uniform(0.1, 10), # uniform distribution\n",
        "#     'kernel': ['linear','rbf','poly'],\n",
        "#     'gamma': ['scale','auto'] + list(np.logspace(-3,3,50))\n",
        "# }\n",
        "\n",
        "# # Define parameters for RandomizedSearchCV\n",
        "# svm = SVC()\n",
        "# f2_scorer = make_scorer(fbeta_score, beta=2)\n",
        "# cv = StratifiedKFold(n_splits=5)\n",
        "\n",
        "# # Create the RandomizedSearchCV object\n",
        "# RSCV_SVM = RandomizedSearchCV(estimator=svm, param_distributions=param_dist, n_iter=20, cv=cv, scoring=f2_scorer)\n",
        "\n",
        "# # Fit the classifier\n",
        "# RSCV_SVM.fit(X_train_pca, Y_train_encoded)\n",
        "\n",
        "# # Extract the best parameters and show the F2-score\n",
        "# print('Best parameters found:', RSCV_SVM.best_params_)\n",
        "# print('Best F2-score found:', RSCV_SVM.best_score_)\n",
        "\n",
        "# # Fit the classifier with the best parameters on the dataset\n",
        "# SVM_classifier = RSCV_SVM.best_estimator_\n",
        "# SVM_classifier.fit(X_train_pca, Y_train_encoded)"
      ],
      "metadata": {
        "id": "cKX_CY--R4TA",
        "outputId": "9526b641-9988-4284-823d-25c2de12875c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coded classes: ['benign' 'malignant']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Learning curves"
      ],
      "metadata": {
        "id": "aIezo95NPVPz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_learning_curve(estimator, title, X, y, cv=None, train_sizes=np.linspace(.1, 1.0, 10)):\n",
        "    \"\"\"\n",
        "    Plots a learning curve.\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.title(title)\n",
        "    plt.xlabel(\"Number of training examples\")\n",
        "    plt.ylabel(\"F2-score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores = learning_curve(\n",
        "        estimator, X, y, cv=cv, scoring=f2_scorer, train_sizes=train_sizes, n_jobs=-1, random_state=0)\n",
        "\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    plt.grid()\n",
        "\n",
        "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                     color=\"r\")\n",
        "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
        "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "             label=\"Training F2-score\")\n",
        "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "             label=\"Cross-validation F2-score\")\n",
        "\n",
        "    plt.legend(loc=\"best\")\n",
        "    return plt\n",
        "\n",
        "# Definieer de classifiers en de trainingsdata\n",
        "classifiers = {'Decision tree classifier': DTC_classifier, 'K-NN classifier': KNN_classifier, 'Random forest classifier': RF_classifier} # HIER MOET NOG SVM BIJ\n",
        "X_train, y_train = X_train_pca, Y_train_encoded\n",
        "\n",
        "# Plot de learning curves voor elke classifier\n",
        "for name, clf in classifiers.items():\n",
        "    title = f\"Learning Curves ({name})\"\n",
        "    plot_learning_curve(clf, title, X_train, y_train, cv=5)\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "Esrky7XRPXfs",
        "outputId": "91fd2c21-7278-4d32-9790-a7b5a41e1ae5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Scores of the best fitted classifiers\n",
        "DIT IS OUTER CROSS VALIDATIE VOLGENS MIJ"
      ],
      "metadata": {
        "id": "wVslX0Q2Z5Il"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifiers = [KNN_classifier, DTC_classifier, RF_classifier]\n",
        "\n",
        "results = {'Metrics': ['Accuracy', 'Precision', 'Recall', 'ROC AUC', 'F2 Score']}\n",
        "\n",
        "# Loop through best fitted classifiers, perform cross_validation and calculate the mean scores\n",
        "for clf in classifiers:\n",
        "    accuracy = cross_val_score(clf, X_train_pca, Y_train_encoded, cv=cv, scoring='accuracy').mean()\n",
        "    precision = cross_val_score(clf, X_train_pca, Y_train_encoded, cv=cv, scoring='precision_macro').mean()\n",
        "    recall = cross_val_score(clf, X_train_pca, Y_train_encoded, cv=cv, scoring='recall_macro').mean()\n",
        "    roc_auc = cross_val_score(clf, X_train_pca, Y_train_encoded, cv=cv, scoring='roc_auc').mean()\n",
        "    f2_score = cross_val_score(clf, X_train_pca, Y_train_encoded, cv=cv, scoring=f2_scorer).mean()\n",
        "\n",
        "    # Add classifier names to the table\n",
        "    clf_name = clf.__class__.__name__\n",
        "    results[clf_name] = [accuracy, precision, recall, roc_auc, f2_score]\n",
        "\n",
        "# Create a dataframe of the results\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "# Transpose dataframe\n",
        "results_df.set_index('Metrics', inplace=True)\n",
        "results_df = results_df.T\n",
        "\n",
        "# Print table\n",
        "print(tabulate(results_df, headers='keys', tablefmt='pretty'))"
      ],
      "metadata": {
        "id": "vWtmvzg0Z7sO",
        "outputId": "b6658d2e-5705-4fff-83e6-289128323318",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n",
            "|                        |      Accuracy      |     Precision      |       Recall       |      ROC AUC       |      F2 Score      |\n",
            "+------------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n",
            "|  KNeighborsClassifier  | 0.6013793103448275 | 0.6046927122585017 | 0.6009523809523809 | 0.6385079365079365 | 0.5965233844789478 |\n",
            "| DecisionTreeClassifier | 0.6022988505747126 | 0.6155354294827979 | 0.608095238095238  | 0.6353015873015873 | 0.6961839965386638 |\n",
            "| RandomForestClassifier | 0.6342528735632184 | 0.626017316017316  | 0.6476190476190476 | 0.6902857142857142 | 0.6591120124453458 |\n",
            "+------------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Comparison of different classifier performances"
      ],
      "metadata": {
        "id": "mG2CQFkMSC7w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## DIT MOET NOG NAAR EEN FUNCTIE OMGEZET WORDEN\n",
        "# From this point on we use the test dataset to compare the performance of the different clasifiers.\n",
        "# Grid_XXX contains te results performed by the grid search. Is de fit van X_train Y_train op op het model\n",
        "# Predict proba geeft een schatting van het aantal juiste klassificaties gemaakt door het systeem.\n",
        "\n",
        "Y_pred_KNN = RSCV_KNN.predict_proba(X_test)[::,1]\n",
        "Y_pred_DTC = RSCV_DTC.predict_proba(X_test)[::,1]\n",
        "Y_pred_RF = RSCV_RF.predict_proba(X_test)[::,1]\n",
        "# Y_score_SVM = RSCV_SVM.decision_function(X_test) # uitvinden waarom hier de desision function wordt gerbuikt!!\n",
        "\n",
        "# Calculate ROC curve for each classifier\n",
        "fpr_KNN, tpr_KNN, _ = roc_curve(Y_test, Y_pred_KNN)\n",
        "fpr_DTC, tpr_DTC, _ = roc_curve(Y_test,  Y_pred_DTC)\n",
        "fpr_RF, tpr_RF, _ = roc_curve(Y_test, Y_pred_RF)\n",
        "# fpr_SVM, tpr_SVM, _ = roc_curve(Y_test,  Y_score_SVM)\n",
        "\n",
        "# Calculate AUC for each classifier\n",
        "roc_auc_KNN = auc(fpr_KNN, tpr_KNN)\n",
        "roc_auc_DTC = auc(fpr_DTC, tpr_DTC)\n",
        "roc_auc_RF = auc(fpr_RF, tpr_RF)\n",
        "# roc_auc_SVM = auc(fpr_SVM, tpr_SVM)\n",
        "\n",
        "# Plotting ROC curves and corresponing AUC for all classifiers\n",
        "plt.figure()\n",
        "lw = 2\n",
        "plt.plot(fpr_KNN, tpr_KNN, color='blue',\n",
        "         lw=lw, label='KNN (AUC = %0.2f)' % roc_auc_KNN)\n",
        "plt.plot(fpr_DTC, tpr_DTC, color='green',\n",
        "         lw=lw, label='DTC (AUC = %0.2f)' % roc_auc_DTC)\n",
        "plt.plot(fpr_RF, tpr_RF, color='yellow',\n",
        "         lw=lw, label='RF (AUC = %0.2f)' % roc_auc_RF)\n",
        "# plt.plot(fpr_SVM, tpr_SVM, color='red',\n",
        "        #  lw=lw, label='SVM (AUC = %0.2f)' % roc_auc_SVM)\n",
        "\n",
        "# Layout of the plot\n",
        "plt.plot([0, 1], [0, 1], color='black', lw=lw, linestyle='--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC curves')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "itxO522ASHSW",
        "outputId": "c6d26979-8cae-4690-c37a-a1a19d531a0f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but KNeighborsClassifier was fitted without feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "X has 493 features, but KNeighborsClassifier is expecting 6 features as input.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-14-d153060e81f1>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Predict proba geeft een schatting van het aantal juiste klassificaties gemaakt door het systeem.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mY_pred_KNN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRSCV_KNN\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mY_pred_DTC\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRSCV_DTC\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mY_pred_RF\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRSCV_RF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    520\u001b[0m         \"\"\"\n\u001b[1;32m    521\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 522\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    523\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mavailable_if\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_estimator_has\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"predict_log_proba\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    284\u001b[0m             \u001b[0mneigh_dist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 286\u001b[0;31m             \u001b[0mneigh_dist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneigh_ind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkneighbors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    287\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m         \u001b[0mclasses_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36mkneighbors\u001b[0;34m(self, X, n_neighbors, return_distance)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_precomputed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m                 \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"C\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m         \u001b[0mn_samples_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_samples_fit_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    586\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcheck_params\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ensure_2d\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 588\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_n_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_check_n_features\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_features\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_features_in_\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    390\u001b[0m                 \u001b[0;34mf\"X has {n_features} features, but {self.__class__.__name__} \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m                 \u001b[0;34mf\"is expecting {self.n_features_in_} features as input.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: X has 493 features, but KNeighborsClassifier is expecting 6 features as input."
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Performing functions on training set"
      ],
      "metadata": {
        "id": "HjEE4UYL-Z0n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Pre-processing\n",
        "outliers_total = define_outliers(X_train)\n",
        "print(f'In total there are {outliers_total} outliers')\n",
        "X_train_scaled = scaling(X_train)\n",
        "X_train_var = zero_variance(X_train_scaled)\n",
        "X_train_anova = anova_analysis(X_train_var, Y_train)\n",
        "best_n_components = find_optimal_components_flattening(X_train_anova, window_size=30, slope_threshold=0.01)  # Vergroot het venster naar 10 punten\n",
        "print(\"Beste aantal componenten (Afvlakkingspunt-methode):\", best_n_components)\n",
        "X_train_pca = PCA_analysis(X_train_anova, best_n_components)\n",
        "Y_train_encoded = label_encoder(Y_train)\n",
        "\n",
        "# Classifiers\n",
        "RSCV_KNN, KNN_classifier = KNN(X_train_pca, Y_train_encoded)\n",
        "RSCV_DTC, DTC_classifier = DTC(X_train_pca, Y_train_encoded)\n",
        "RSCV_RF, RF_classifier = RFC(X_train_pca, Y_train_encoded)\n",
        "RSCV_SVM, SVM_classifier = SVM(X_train_pca, Y_train_encoded)"
      ],
      "metadata": {
        "id": "sO-leI7N-dzN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Performing functions on test set"
      ],
      "metadata": {
        "id": "NfJqV3dS-eG0"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "L-JlGt2m-gC7"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}